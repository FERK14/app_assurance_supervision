
import streamlit as st
import pandas as pd
from sklearn.ensemble import RandomForestClassifier
from sklearn.preprocessing import StandardScaler
import matplotlib.pyplot as plt
import seaborn as sns
from docx import Document
from openai import OpenAI

# Configurer OpenAI (version >= 1.0.0)
client = OpenAI(api_key=st.secrets["openai_api_key"])

st.set_page_config(page_title="Supervision IA - Assurances", layout="wide")

# Charger les donn√©es
df = pd.read_excel("donnees_assurances_simulees.xlsx")

# Pr√©parer les donn√©es
X = df.drop(columns=["Nom_Compagnie", "En_risque"])
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Entra√Æner le mod√®le
model = RandomForestClassifier(n_estimators=100, random_state=42)
model.fit(X_scaled, df["En_risque"])
df["Prediction_IA"] = model.predict(X_scaled)
df["Probabilit√©_Risque"] = model.predict_proba(X_scaled)[:, 1]

# G√©n√©rer commentaire IA avec OpenAI GPT
def rediger_commentaire(row):
    prompt = f"""
Tu es analyste du secteur des assurances. R√©dige un commentaire professionnel de 150 mots sur cette compagnie :

- Chiffre d'affaires : {row['Chiffre_affaires']:,} FCFA
- Taux de sinistralit√© : {row['Taux_sinistralite']:.2f} %
- Ratio de solvabilit√© : {row['Ratio_solvabilite']:.2f} %
- Ratio de liquidit√© : {row['Ratio_liquidite']:.2f} %
- Nombre d'agences : {int(row['Nombre_agences'])}
- Rendement des investissements : {row['Rendement_investissements']:.2f} %
- Score IA (risque) : {row['Probabilit√©_Risque']:.2%}

Analyse les risques, les points forts, et propose une recommandation claire pour les autorit√©s de r√©gulation.
"""
    try:
        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "user", "content": prompt}],
            temperature=0.6,
            max_tokens=300
        )
        return response.choices[0].message.content.strip()
    except Exception as e:
        return f"Erreur OpenAI : {e}"

# Interface utilisateur
st.title("üìä Supervision IA du secteur des assurances")

# SECTION 1 : Analyse individuelle
st.header("üîç Analyse d'une compagnie")
index = st.selectbox("S√©lectionner une compagnie", df.index)
row = df.loc[index]

st.subheader("üìå Indicateurs financiers")
cols1, cols2, cols3 = st.columns(3)
cols1.metric("Chiffre d'affaires", f"{row['Chiffre_affaires']:,} FCFA")
cols2.metric("Sinistralit√© (%)", f"{row['Taux_sinistralite']:.2f}")
cols3.metric("Solvabilit√© (%)", f"{row['Ratio_solvabilite']:.2f}")
cols4, cols5, cols6 = st.columns(3)
cols4.metric("Liquidit√© (%)", f"{row['Ratio_liquidite']:.2f}")
cols5.metric("Agences", int(row["Nombre_agences"]))
cols6.metric("Rendement Invest. (%)", f"{row['Rendement_investissements']:.2f}")

st.subheader("üß† Pr√©diction IA")
if row["Prediction_IA"] == 1:
    st.error(f"‚ö†Ô∏è Risque d√©tect√© (probabilit√© : {row['Probabilit√©_Risque']:.2%})")
else:
    st.success(f"‚úÖ Aucun risque d√©tect√© (probabilit√© : {row['Probabilit√©_Risque']:.2%})")

st.subheader("üìà Ratio de solvabilit√© (comparaison)")
fig, ax = plt.subplots(figsize=(10, 6))
sns.barplot(x=df["Ratio_solvabilite"], y=df["Nom_Compagnie"], palette="coolwarm", ax=ax)
ax.axvline(100, color="red", linestyle="--")
ax.set_xlabel("Ratio de solvabilit√© (%)")
st.pyplot(fig)

# SECTION 2 : Rapport global Word
st.header("üìù Rapport IA - Top 10 compagnies √† risque")

if st.button("üìÑ G√©n√©rer le rapport Word"):
    top10 = df.sort_values(by="Probabilit√©_Risque", ascending=False).head(10)
    doc = Document()
    doc.add_heading("Rapport IA ‚Äì Top 10 compagnies √† risque", 0)

    with st.spinner("‚è≥ G√©n√©ration des commentaires IA..."):
        for i, row in top10.iterrows():
            commentaire = rediger_commentaire(row)
            doc.add_heading(row["Nom_Compagnie"], level=1)
            doc.add_paragraph(f"Chiffre d'affaires : {row['Chiffre_affaires']:,} FCFA")
            doc.add_paragraph(f"Score IA : {row['Probabilit√©_Risque']:.2%}")
            doc.add_paragraph("üìù Commentaire IA :")
            doc.add_paragraph(commentaire)

    filename = "rapport_assurances_ia.docx"
    doc.save(filename)
    with open(filename, "rb") as f:
        st.download_button("üì• T√©l√©charger le rapport", f, file_name=filename)
